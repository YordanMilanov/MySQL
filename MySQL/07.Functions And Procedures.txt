#1. Employees with Salary Above 35000

DELIMITER $$
CREATE PROCEDURE usp_get_employees_salary_above_35000()
BEGIN
SELECT `first_name`, `last_name` FROM `employees`
WHERE `salary` > 35000
ORDER BY `first_name`, `last_name`, `employee_id`;
END$$

#2. Employees with Salary Above Number
DELIMITER $$
CREATE PROCEDURE usp_get_employees_salary_above(target_salary DECIMAL(19,4))
BEGIN
SELECT `first_name`, `last_name` FROM `employees`
WHERE `salary` >= target_salary
ORDER BY `first_name`, `last_name`, `employee_id`;
END$$

#3. Town Names Starting With
DELIMITER $$
CREATE PROCEDURE usp_get_towns_starting_with(start_name VARCHAR(255))
BEGIN
SELECT `name` FROM `towns`
WHERE `name` LIKE CONCAT(start_name,'%')
ORDER BY `name`;
END$$

#4. Employees from Town
DELIMITER $$
CREATE PROCEDURE usp_get_employees_from_town(searched_name VARCHAR(255))
BEGIN
SELECT e.`first_name`, e.`last_name` FROM `employees` AS e
JOIN `addresses` AS a USING (`address_id`)
JOIN `towns` AS t USING (`town_id`)
WHERE t.`name` = searched_name
ORDER BY e.`first_name`, e.`last_name`, e.`employee_id`;
END$$

#5. Salary Level Function
DELIMITER $$
CREATE FUNCTION ufn_get_salary_level(salary DECIMAL(19,4))
RETURNS VARCHAR(50)
DETERMINISTIC
BEGIN
DECLARE salary_level VARCHAR(10);
IF salary < 30000 THEN SET salary_level := 'Low';
ELSEIF salary <= 50000 THEN SET salary_level := 'Average';
ELSE SET salary_level := 'High';
END IF;
RETURN salary_level;
END$$

#6. Employees by Salary Level
DELIMITER $$
CREATE PROCEDURE usp_get_employees_by_salary_level(salary_level VARCHAR(10))
BEGIN
SELECT `first_name`, `last_name` 
FROM `employees`
WHERE ufn_get_salary_level(`salary`) LIKE salary_level
ORDER BY `first_name` DESC, `last_name` DESC;
END$$

#7. Define Function
DELIMITER $$
CREATE FUNCTION ufn_is_word_comprised(set_of_letters varchar(50), word varchar(50))
RETURNS INT
DETERMINISTIC
BEGIN
RETURN word REGEXP (CONCAT('^[', set_of_letters, ']+$'));
END$$

#8. Find Full Name
CREATE PROCEDURE usp_get_holders_full_name()
BEGIN
SELECT CONCAT(`first_name`, ' ', `last_name`) AS 'full_name' FROM `account_holders`
ORDER BY `full_name`, `id`;
END$$

#9. People with Balance Higher Than
CREATE PROCEDURE usp_get_holders_with_balance_higher_than(target_money DECIMAL(19,4))
BEGIN
SELECT h.`first_name`, h.`last_name` FROM `account_holders` AS h
LEFT JOIN `accounts` AS a ON h.`id` = a.`account_holder_id`
GROUP BY h.`first_name`, h.`last_name`
HAVING SUM(a.`balance`) > target_money
ORDER BY a.`account_holder_id`;
END$$

#10. Future Value Function
CREATE FUNCTION ufn_calculate_future_value(sum DECIMAL(19,4), yearly_interest_rate DECIMAL(19,4), number_of_years INT)
RETURNS DECIMAL(19, 4)
DETERMINISTIC
BEGIN
DECLARE future_sum DECIMAL (19,4); #Holding the future SUM
SET future_sum := sum * POW((1 + yearly_interest_rate), number_of_years);
RETURN future_sum;
END$$

#11. Calculating Interest
CREATE PROCEDURE usp_calculate_future_value_for_account(id INT, rate DECIMAL(19,4))
BEGIN
SELECT a.`id` AS 'account_id',
ah.`first_name`,
ah.`last_name`,
a.`balance` AS 'current_balance' ,
ufn_calculate_future_value(a.`balance`, rate, 5) AS 'balance_in_5_years'
FROM `account_holders` AS ah
JOIN `accounts` AS a ON ah.`id` = a.`account_holder_id`
WHERE a.`id` = id; 
END$$
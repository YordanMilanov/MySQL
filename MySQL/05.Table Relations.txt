#1. One-To-One Relationship

# Creating the passport table
CREATE TABLE `passports` (
`passport_id` INT PRIMARY KEY AUTO_INCREMENT,
`passport_number` VARCHAR(50) UNIQUE
);

#Adding objects (passports) to the table 
INSERT INTO `passports` (`passport_id`, `passport_number`)
VALUES
(101, 'N34FG21B'),
(102, 'K65LO4R7'),
(103, 'ZE657QP2');

#Creating the people table
CREATE TABLE `people` (
`person_id` INT PRIMARY KEY AUTO_INCREMENT,  
`first_name` VARCHAR(255), 
`salary` DECIMAL(9, 2), 
`passport_id` INT UNIQUE,
CONSTRAINT fk
FOREIGN KEY(`passport_id`)
REFERENCES `passports` (`passport_id`)
);


INSERT INTO `people` (`first_name`, `salary`, `passport_id`)
VALUES 
("Roberto", 43300, 102),
("Tom", 56100, 103),
("Yana", 60200, 101);

#2. One-To-Many Relationship
CREATE TABLE `manufacturers` (
`manufacturer_id`INT PRIMARY KEY AUTO_INCREMENT,
`name` VARCHAR(45) NOT NULL UNIQUE,
`established_on` DATE
);

INSERT INTO `manufacturers` (`manufacturer_id`, `name`, `established_on`)
VALUES 
(1,"BMW", "1916/03/01"),
(2,"Tesla", "2003/01/01"),
(3,"Lada", "1966/05/01");

CREATE TABLE `models` (
`model_id` INT PRIMARY KEY AUTO_INCREMENT,
`name` VARCHAR(50) NOT NULL,
`manufacturer_id` INT,
CONSTRAINT fk
FOREIGN KEY (`manufacturer_id`)
REFERENCES `manufacturers` (`manufacturer_id`)
);

INSERT INTO `models` (`model_id`, `name`, `manufacturer_id`)
VALUES
(101,'X1', 1),
(102,'i6', 1),
(103,'Model S', 2),
(104,'Model X', 2),
(105,'Model 3', 2),
(106,'Nova', 3);

#3. Many-To-Many Relationship

CREATE TABLE `students` (`student_id` INT PRIMARY KEY AUTO_INCREMENT,
`name` VARCHAR(50) NOT NULL);

INSERT INTO `students` (`student_id`, `name`)
VALUES
(1, 'Mila'),
(2, 'Toni'),
(3, 'Ron');

CREATE TABLE `exams` (`exam_id` INT PRIMARY KEY AUTO_INCREMENT,
`name` VARCHAR(50) NOT NULL);

INSERT INTO `exams` (`exam_id`, `name`)
VALUES
(101, 'Spring MVC'),
(102, 'Neo4j'),
(103, 'Oracle 11g');

CREATE TABLE `students_exams` (
   `student_id` INT NOT NULL,
   `exam_id` INT NOT NULL,
   
   CONSTRAINT pk
   PRIMARY KEY (`student_id`, `exam_id`),
   
   CONSTRAINT fk_this_student
   FOREIGN KEY (`student_id`)
   REFERENCES `students` (`student_id`), 
   
   CONSTRAINT fk_this_exams
   FOREIGN KEY (`exam_id`)
   REFERENCES `exams` (`exam_id`)
);
   

INSERT INTO `students_exams` (`student_id`, `exam_id`)
VALUES
(1, 101),
(1, 102),
(2, 101),
(3, 103),
(2, 102),
(2, 103);

#4. Self-Referencing
CREATE TABLE `teachers` (
`teacher_id` INT PRIMARY KEY AUTO_INCREMENT,
`name` VARCHAR(55) NOT NULL,
`manager_id` INT);



INSERT INTO `teachers` (`teacher_id`, `name`, `manager_id`)
VALUES 
(101, "John", NULL),
(102, "Maya", 106),
(103, "Silvia", 106),
(104, "Ted", 105),
(105, "Mark", 101),
(106, "Greta", 101);

ALTER TABLE `teachers` 
ADD CONSTRAINT fk
FOREIGN KEY (`manager_id`)
REFERENCES `teachers`(`teacher_id`);

#6. University Database
CREATE DATABASE `university`;
USE `university`;

CREATE TABLE `subjects` (
`subject_id` INT(11) PRIMARY KEY AUTO_INCREMENT,
`subject_name` VARCHAR(50)
);

CREATE TABLE `majors` (
`major_id` INT(11) PRIMARY KEY AUTO_INCREMENT,
`name` VARCHAR(50)
);

CREATE TABLE `payments` (
`payment_id` INT(11) PRIMARY KEY AUTO_INCREMENT,
`payment_date` DATE,
`payment_amount` DECIMAL(8,2),
`student_id` INT(11)
);

CREATE TABLE `students` (
`student_id` INT PRIMARY KEY AUTO_INCREMENT,
`student_number` VARCHAR(12) UNIQUE,
`student_name` VARCHAR(50),
`major_id` INT(11)
);

CREATE TABLE `agenda` (
`student_id` INT(11),
`subject_id` INT(11),  
 CONSTRAINT pk
PRIMARY KEY (`student_id`, `subject_id`)
);


#Connection between students and payments -> FK payments
ALTER TABLE `payments`
ADD CONSTRAINT fk_students
FOREIGN KEY (`student_id`)
REFERENCES `students` (`student_id`);

#Connection between students and majors(квалификации) - FK payments
ALTER TABLE `students`
ADD CONSTRAINT fk_majors
FOREIGN KEY (`major_id`)
references `majors`(`major_id`);

#Connection between `agenda` and `subjects` -> fk agenda
ALTER TABLE `agenda`
ADD CONSTRAINT fk_subjects
FOREIGN KEY (`subject_id`)
REFERENCES `subjects` (`subject_id`);

#Connection between `agenda` and `students` -> fk agenda
ALTER TABLE `agenda`
ADD CONSTRAINT fk_students_agenda
FOREIGN KEY (`student_id`)
REFERENCES `students` (`student_id`);

